#!/usr/bin/env python3
#
# Cluster Control
#
# (c) 8086 Consultancy 2018-2020
#
import glob
import re
import sys
import smbus
import time
import os
import subprocess
import shlex
import shutil

args = len(sys.argv)

if args == 1 or  'help' in sys.argv or '--help' in sys.argv or '--h' in sys.argv or '-h' in sys.argv or '/?' in sys.argv[1]:
	help_width = 30
	indent_width=3
	indent = "".ljust(indent_width)
	
	print("Usage:	clusterctrl <command> [<args>]")
	print("")
	print("<devices> can be a single device index '1' or a list '2 3 4'")
	print("")
	print("Commands: ")
	print(indent + "init".ljust(help_width) +							"Create/update symlinks for rpiboot [root]")
	print(indent + "status".ljust(help_width) +						"Shows the current status of the clusterhat and nodes")
	print(indent + "maxpi".ljust(help_width) +							"Returns max number of Pi Zeros we control")
	print(indent + "on|off [<devices>]".ljust(help_width) +			"Turn on/off All Pi Zero or devices")
#	print(indent + "shutdown [<devices>]".ljust(help_width) + 			"NYI. Send shutdown command to All Pi Zero or devices")  # TODO implement
	print(indent + "alert on|off [<devices>]".ljust(help_width) +		"Turns on/off ALERT LED or all or listed devices")
	print(indent + "led on|off".ljust(help_width) +					"Enable/disable all LED")
	print(indent + "hub off|on|reset".ljust(help_width) +				"USB hub can be turned on/off on Cluster HAT and reset on CTRL")
	print(indent + "getpath <device>".ljust(help_width) +				"Get USB path to the chosen device")
	print(indent + "fan on|off".ljust(help_width) +					"Turns FAN on/off")
	print(indent + "wp on|off".ljust(help_width) +						"Enable/disable write protection")
	print(indent + "usbboot".ljust(help_width) + 						"Commands to handle the USBBoot folders and data")
	print(indent + indent + "on|off [<devices>]".ljust(help_width) + 		"Mounts/Unmounts all folders for successful USBBoot for all, or chosen, devices")
	print(indent + indent + "setup [<devices>]".ljust(help_width) + 		"Sets up everthing neccesary for the specified node(s). Building VFS will take longer depending on the chosen size")
	print(indent + indent + "reset <device>".ljust(help_width) + 			"Resets the device's data by removing contents of the node's OFS dir")
	print(indent + indent + "resize <device> <new-size>".ljust(help_width) + 			"NYI. Resizes the device's VFS file to the new size") # TODO implement
	print(indent + indent + "status [<devices>]".ljust(help_width) + 		"NYI. Shows the USBBoot status of all, or chosen, nodes")  # TODO implement
	print(indent + indent + "service".ljust(help_width) +			 		"Called by the USBBoot service, calls 'on' for all devices but doesnt do the init functionality")
	sys.exit(1)

# Read configuration file
config = {}
if os.path.isfile("/usr/share/clusterctrl/clusterctrl.sample"):
	with open("/usr/share/clusterctrl/clusterctrl.sample") as defconfigfile:
		for line in defconfigfile:
			if line[:1] != '#':
				k, v = line.partition("=")[::2]
				config[k.strip().lower()] = v.split('#')[0].strip(" \"'\n\t")

if os.path.isfile("/etc/default/clusterctrl"):
	with open("/etc/default/clusterctrl") as configfile:
		for line in configfile:
			if line[:1] != '#':
				k, v = line.partition("=")[::2]
				config[k.strip().lower()] = v.split('#')[0].strip(" \"'\n\t")

# tbh not sure if we need to even do this check at all, opr even use the variable
if 'type' not in config:
	print("WARN: Controller type not defined")
elif not (config['type'] == "Bridge" or config['type'] == "NAT"):
	print("WARN: Type is improperly configured ")
# Config

# I2C address of ClusterCTRL device
I2C_ADDRESS = 0x20

# Number of Pi Zero in ClusterHAT (set below)
clusterhat_size = 0

# ClusterCTRL Registers
REG_VERSION = 0x00  # Register layout version
REG_MAXPI = 0x01  # Maximum number of Pi
REG_ORDER = 0x02  # Order - used to sort multiple ClusterCTRL devices
REG_MODE = 0x03  # N/A
REG_TYPE = 0x04  # 0=DA, 1=pHAT
REG_DATA7 = 0x05  #
REG_DATA6 = 0x06  #
REG_DATA5 = 0x07  #
REG_DATA4 = 0x08  #
REG_DATA3 = 0x09  #
REG_DATA2 = 0x0a  #
REG_DATA1 = 0x0b  #
REG_DATA0 = 0x0c  #
REG_CMD = 0x0d  # Command
REG_STATUS = 0x0e  # Status

# ClusterCTRL Commands
CMD_ON = 0x03  # Turn on Px (data0=x)
CMD_OFF = 0x04  # Turn off Px (data0=x)
CMD_ALERT_ON = 0x05  # Turn on Alert LED
CMD_ALERT_OFF = 0x06  # Turn off Alert LED
CMD_HUB_CYCLE = 0x07  # Reset USB HUB (turn off for data0*10ms, then back on)
CMD_LED_EN = 0x0A  # Enable Px LED (data0=x)
CMD_LED_DIS = 0x0B  # Disable Px LED (data0=x)
CMD_PWR_ON = 0x0C  # Turn off PWR LED
CMD_PWR_OFF = 0x0D  # Turn off PWR LED
CMD_RESET = 0x0E  # Resets ClusterCTRL (does not keep power state)
CMD_GET_PSTATUS = 0x0F  # Get Px power status (data0=x)
CMD_FAN = 0x10  # Turn fan on (data0=1) or off (data0=0)
CMD_GETPATH = 0x11  # Get USB path to Px (data0=x 0=controller) returned in data7-data0
CMD_USBBOOT_EN = 0x12  # Turn on USBBOOT
CMD_USBBOOT_DIS = 0x13  # Turn off USBBOOT
CMD_GET_USTATUS = 0x14  # Get Px USBBOOT status (data0=x)
CMD_SET_ORDER = 0x15  # Set order (data0=order)
CMD_SAVE = 0xF0  # Save current PWR/P1-LED/P2-LED/P1/P2/Order/Mode to EEPROM
CMD_SAVEDEFAULTS = 0xF1  # Save factory defaults
CMD_GET_DATA = 0xF2  # Get DATA (Temps/ADC/etc.)
CMD_SAVE_ORDER = 0xF3  # Save order to EEPROM
CMD_SAVE_USBBOOT = 0xF4  # Save usbboot status to EEPROM
CMD_SAVE_POS = 0xF5  # Save Power On State to EEPROM
CMD_SAVE_LED = 0xF6  # Save LED to EEPROM
CMD_NOP = 0x90  # Do nothing

# Get arbitrary data from ClusterCTRL
GET_DATA_VERSION = 0x00  # Get firmware version
GET_DATA_ADC_CNT = 0x01  # Returns number of ADC ClusterCTRL supports
GET_DATA_ADC_READ = 0x02  # Read ADC data for ADC number 'data0'
GET_DATA_ADC_TEMP = 0x03  # Read Temperature ADC
GET_DATA_FANSTATUS = 0x04  # Read fan status

# Files/paths
clusterctrl_prefix = '/dev/ClusterCTRL-'
vcgencmdpath = "/usr/bin/vcgencmd"
hat_product = "/proc/device-tree/hat/product"
hat_version = "/proc/device-tree/hat/product_ver"
hat_uuid = "/proc/device-tree/hat/uuid"
hat_vendor = "/proc/device-tree/hat/vendor"
hat_pid = "/proc/device-tree/hat/product_id"

node_prefix = config['node_prefix']
vfsSize = config['vfs_size']
dataDir = config['data_dir']
bootDir = os.path.join(dataDir, config['boot_dir'])
ofsLowerDir = os.path.join(dataDir, config['ofs_lower_dir'])

vfs_filename = config['vfs_filename']
nfs_dir = config['nfs_dir']
ofs_dir = config['ofs_dir']
# String REQUIRES node_index to present in this variable
ipv4_address = config['internal_ip_base']


# Build list of pi zero numbers to get USB path of
def getusbpaths(zeros=None):
	if zeros is None:
			zeros = range(1, clusterhat_size+1)

	paths = {}  # Result variable
	cache_clusterhat = None  # USB path to HUB on Cluster HAT
	cache_clusterctrl = {}  # Cache of ClusterCTRL USB path prefixes

	for zero in zeros:
		lastpi = 0  # max pX for the current device
		# Get USB path to pi device
		if clusterhat:
			lastpi += clusterhat_size
			if zero <= lastpi:
				if version == 2:
					if cache_clusterhat is None:
						# Detect Cluster HAT by turning the HUB on / off / on
						# First ensure the hub is turned on
						if version_minor == 0:
							hub.on()
						else:
							hub.off()
						time.sleep(1)
						# Get list of USB hubs with the correct pid/vid
						import usb.core as prescan
						devices = {}
						hubs = prescan.find(idVendor=0x05e3, idProduct=0x0608, find_all=1)
						for clusterhathub in hubs:
							devices[str(clusterhathub.bus)+'-'+'.'.join(map(str, clusterhathub.port_numbers))] = 'pre'
						pre_count = len(devices)
						# Turn hub off
						if version_minor == 0:
							hub.off()
						else:
							hub.on()
						time.sleep(1)
						import usb.core as postscan
						hubs = postscan.find(idVendor=0x05e3, idProduct=0x0608, find_all=1)
						for clusterhathub in hubs:
							devices[str(clusterhathub.bus)+'-'+'.'.join(map(str, clusterhathub.port_numbers))] = 'post'
						post_count = len(devices)
						# Check we haven't gained an extra USB hubs
						if pre_count == post_count:
							found = 0
							for path, state in devices.items():
								if state == 'pre':
									found = found + 1
									cache_clusterhat = path
						# Turn hub back on
						if version_minor == 0:
							hub.on()
						else:
							hub.off()
						# If more than one hub went awol then we don't know which one it should be
						if found != 1:
							cache_clusterhat = None
					if cache_clusterhat is not None:
						paths[str(zero)] = str(cache_clusterhat + "." + str(5-zero))
	return paths


def is_float(n):
	try:
		float(n)
		return True
	except ValueError:
		return False


# Helper to run the OS commands for the USBBoot config and init
def run_os_cmd(cmd_in):
	print(" - Running command: '" + cmd_in + "'")
	result = subprocess.run(shlex.split(cmd_in), shell=False)
	if result.returncode != 0:
		print(" - Command returned with non-zero result code: '"+str(result.returncode)+"'")
		return False
	else:
		return True


# Returns the node's directory
def get_node_dir(node_index):
	fq_node = node_prefix + str(node_index)
	full_path = os.path.join(dataDir, fq_node)
	return full_path


def link_boot_dir(node_index, usb_paths):
	# Create new link for Px
	#for node, _path in sorted(usb_paths.items()):
	_path = usb_paths[str(node_index)]
	if _path:
		boot_path = os.path.join(bootDir, _path)
		# If the link already exists remove it
		if os.path.islink(boot_path):
			os.unlink(boot_path)
		os.symlink(os.path.join(get_node_dir(node_index), nfs_dir, "boot/"), boot_path)
		return True


def sed(check, replace, file_in):
	file_in_resource = open(file_in, "r")
	file_in_contents = file_in_resource.read()
	file_in_resource.close()
	updated_contents = re.sub(check, replace, file_in_contents)
	file_in_resource = open(file_in, "w")
	file_in_resource.write(updated_contents)
	file_in_resource.close()


# nodes = int array of index
# do_init = create missing folders/files and setup usbboot, or false when you only want
# 	things to be enabled if already setup (eg for the service)
def usbboot_node_on(nodes, do_init=True):
	usb_paths = getusbpaths()
	# Only root should fiddle with the links
	if os.geteuid() != 0:
		print("Cant run as non-root")
	else:
		controller_ipv4 = ipv4_address.format(node_index=254)
		# mount file systems
		if not os.path.exists(os.path.join(ofsLowerDir, "boot")):
			print("Missing lower directory for OverlayFS, cannot setup USB Boot for the nodes")
			print("Extract USBBootable image to " + ofsLowerDir)
		else:
			currently_mounted_file = open("/etc/mtab")
			currently_mounted = currently_mounted_file.read()
			currently_mounted_file.close()
			
			for node in nodes:
				node = int(node)
				print("Starting USBBoot mounting for node " + str(node))
				node_dir = get_node_dir(node)
				if not os.path.exists(node_dir) and do_init:
					os.makedirs(node_dir)
					print("Making node dir")
				if not os.path.exists(node_dir):
					print("Dir does not exist, cannot continue (" + node_dir + ")")
				if os.path.exists(node_dir):
					is_enabled = len([x for x in os.listdir(os.path.join(node_dir)) if len(x) >= 6 and (x[-6:] == "enable" or x[-7:] == "enabled")]) != 0
					if not is_enabled and do_init:
						open(os.path.join(node_dir, node_prefix+str(node)+".usbboot.enabled"), "w").close()
						is_enabled = True
					if is_enabled:
						vfs_full_path = os.path.join(node_dir, vfs_filename) + ".ext4"
						if not os.path.exists(vfs_full_path) and do_init:
							open(vfs_full_path, "w").close()
							run_os_cmd("dd if=/dev/zero of=" + vfs_full_path + " iflag=count_bytes count=" + vfsSize)
							run_os_cmd("mkfs.ext4 " + vfs_full_path)
						# NOT elif/else because we need to re-check if creation succeeded/failed
						if os.path.exists(vfs_full_path):
							ofs_full_path = os.path.join(node_dir, ofs_dir)
							if not os.path.exists(ofs_full_path) and do_init:
								os.makedirs(ofs_full_path)
							if os.path.exists(ofs_full_path):
								vfs_mount_str = "mount -o rw,usrquota,grpquota " + vfs_full_path + " " + ofs_full_path
								print("[VFS] Now mounting VFS to OFS path for node " + str(node))
								if ofs_full_path in currently_mounted or run_os_cmd(vfs_mount_str):
									ofs_full_path_upper = os.path.join(ofs_full_path, "upper")
									ofs_full_path_work = os.path.join(ofs_full_path, "work")
									if (not os.path.exists(ofs_full_path_upper) or not os.path.exists(ofs_full_path_work)) and do_init:
										os.makedirs(ofs_full_path_upper)
										os.makedirs(ofs_full_path_work)
									if os.path.exists(ofs_full_path_upper) and os.path.exists(ofs_full_path_work):
										nfs_full_path = os.path.join(node_dir, nfs_dir)
										if not os.path.exists(nfs_full_path) and do_init:
											os.makedirs(nfs_full_path)
										if os.path.exists(nfs_full_path):
											ofs_mount_str = "mount -o rw,relatime,lowerdir=" + ofsLowerDir + ",upperdir=" + os.path.join(ofs_full_path, "upper") + ",workdir=" + os.path.join(ofs_full_path, "work") + " -t overlay overlay " + nfs_full_path
											print("[OFS] Now mounting OFS to NFS path for node " + str(node))


											if nfs_full_path in currently_mounted or run_os_cmd(ofs_mount_str):
												print("[NFS] Now mounting NFS path for node " + str(node))
												
												currently_mounted_nfs_file = open("/var/lib/nfs/etab")
												currently_mounted_nfs = currently_mounted_nfs_file.read()
												currently_mounted_nfs_file.close()
												# mount boot first
												if link_boot_dir(node, usb_paths):
													nfs_mount_str = "exportfs -o rw,sync,no_subtree_check,no_root_squash " + ipv4_address.format(node_index=node) + ":" + nfs_full_path
													print("[NFS] Now exporting NFS path for node " + str(node))
													if run_os_cmd(nfs_mount_str):
														if do_init:
															sed(r"\n127.0.1.1(\s|\t)*(\w*)", r"127.0.1.1\t"+node_prefix+str(node), os.path.join(nfs_full_path, "etc", "hosts"))
															node_ipv4 = ipv4_address.format(node_index=node)
															sed(r"nfsroot=(.)*static", "nfsroot="+controller_ipv4+":"+nfs_full_path+" rw ip="+node_ipv4+":"+controller_ipv4+"::255.255.255.0:"+node_prefix+str(node)+":usb0.10:static", os.path.join(nfs_full_path, "boot", "cmdline.txt"))
															sed(r"\nstatic ip_address=(.)* #ClusterCTRL", "static ip_address="+node_ipv4+"/24 #ClusterCTRL", os.path.join(nfs_full_path, "etc", "dhcpcd.conf"))
															open(os.path.join(nfs_full_path, "boot", "ssh"), "w").close()
													print("Node " + str(node) + " is ready for USBBoot")
												else:
													print("Failed to link boot dir for node " + str(node))
													


def usbboot_node_off(nodes):
	for node in nodes:
		node_dir = get_node_dir(node)
		node_ipv4 = ipv4_address.format(node_index=int(node))		
		
		currently_mounted_nfs_file = open("/var/lib/nfs/etab")
		currently_mounted_nfs = currently_mounted_nfs_file.read()
		currently_mounted_nfs_file.close()
		
		nfs_full_path = os.path.join(node_dir, nfs_dir)
		nfs_umount_str = "exportfs -u " + node_ipv4 + ":" + nfs_full_path
		
		if nfs_full_path not in currently_mounted_nfs or run_os_cmd(nfs_umount_str):
			print("Unmounted NFS")
		else:
			print("NFS unmount error")		
		
		currently_mounted_file = open("/etc/mtab")
		currently_mounted = currently_mounted_file.read()
		currently_mounted_file.close()
		
		ofs_full_path = os.path.join(node_dir, ofs_dir)
		ofs_unmount_str = "umount " + nfs_full_path
		if ofs_full_path not in currently_mounted or run_os_cmd(ofs_unmount_str):
			print("Unmounted OFS")
		else:
			print("OFS unmount error")
		
		vfs_full_path = os.path.join(node_dir, vfs_filename) + ".ext4"
		vfs_umount_str = "umount " + ofs_full_path
		if vfs_full_path not in currently_mounted or run_os_cmd(vfs_umount_str):
			print("Unmounted VFS")
		else:
			print("VFS unmount error")
		enabled_files = [x for x in os.listdir(node_dir) if len(x) >= 6 and (x[-6:] == "enable" or x[-7:] == "enabled")]
		for enabled_file in enabled_files:
			os.remove(os.path.join(node_dir, enabled_file))


##########
#  Init  #
##########
# Get Pi power on delay from config
delay = 1 if 'clusterctrl_delay' not in config or not is_float(config['clusterctrl_delay']) or float(config['clusterctrl_delay']) < 0 else config['clusterctrl_delay']
maxpi = 0

# Do we have a ClusterHAT ?
clusterhat = True
version = 0
version_minor = 0

f = open(hat_product, "r")
if f.read().strip('\x00') != 'ZC4:ClusterHAT':
	clusterhat = False  # No ClusterHAT found
	print("No ClusterHAT found")
if clusterhat:
	version = 0
	f = open(hat_version, "r")
	tmp = int(f.read().strip('\x00'), 16)
	f.close()
	if 16 <= tmp <= 31:
		version = 1
		version_minor = tmp - 16
	elif 32 <= tmp <= 47:
		version = 2
		version_minor = tmp - 32
	else:
		clusterhat = False  # No ClusterHAT found
		print("Count not determine ClusterHAT version")
if clusterhat:
	clusterhat_size = 4 if 'clusterhat_size' not in config else int(config['clusterhat_size'])
	if clusterhat_size > 4:
		clusterhat_size = 4

# Init ClusterHAT if we have one
if clusterhat:
	maxpi += clusterhat_size
	if version == 1:
		import RPi.GPIO as GPIO
		GPIO.setwarnings(False)
		ports = [5, 6, 13, 19, 26]
		GPIO.setmode(GPIO.BCM)
		GPIO.setup(ports, GPIO.OUT)
	else:  # v2.x
		sys.path.append('/usr/share/clusterctrl/python')
		import xra1200
		wp_link = 0
		bus = smbus.SMBus(1)
		hat = xra1200.Xra1200(bus=1, address=I2C_ADDRESS)
		p1 = xra1200.Xra1200(bus=1, address=I2C_ADDRESS, port=0)
		p2 = xra1200.Xra1200(bus=1, address=I2C_ADDRESS, port=1)
		p3 = xra1200.Xra1200(bus=1, address=I2C_ADDRESS, port=2)
		p4 = xra1200.Xra1200(bus=1, address=I2C_ADDRESS, port=3)
		led = xra1200.Xra1200(bus=1, address=I2C_ADDRESS, port=4)
		hub = xra1200.Xra1200(bus=1, address=I2C_ADDRESS, port=5)
		alert = xra1200.Xra1200(bus=1, address=I2C_ADDRESS, port=6)
		wp = xra1200.Xra1200(bus=1, address=I2C_ADDRESS, port=7)

		# Get status of I/O Extender
		dir = hat.get_dir()  # I/O pin directions
		status = hat.read_byte()  # Pin Status

		# Detect I/O Expander
		xra1200p = True
		pur = hat.get_pur()
		if pur == -1:
			xra1200p = False

		# If all pins are inputs this is the first run since HAT power up
		if dir == 255:
			# Detect if WP is being pulled high
			if xra1200p:
				hat.set_pur(0x7F)  # Disable pullup for EEPROM WP on I/O expander
				wp_link = (hat.read_byte() >> 7)  # 1 = soldered / 0 = open
				if wp_link == 1:
					hat.set_pur(0xFF)
				else:
					wp.on()
			else:
				wp.on()
				wp_link = -1
			if (status & 0xF) == 0xF:  # Check POS [Power On State]
				# POS [NO LINK] set power ON (CUT)
				p1.on()
				p2.on()
				p3.on()
				p4.on()
			else:
				# POS [LINK] set power off (Default)
				p1.off()
				p2.off()
				p3.off()
				p4.off()
			# Set default state for other pins
			alert.off()
			led.on()
			if version_minor == 0:
				hub.on()
			else:
				hub.off()
			hat.set_dir(0x00)  # Set all pins as outputs
		else:
			if version == 2 and xra1200p is True:
				if hat.get_pur() >> 7:
					wp_link = 1
			else:
				wp_link = -1
# Ensure we have at least one ClusterCTRL or a ClusterHAT
else:
	print(f"ERROR: {sys.argv[0]} could not start\n")
	sys.exit(1)

# Are we running init and should we create the symlinks for usbboot?
if args == 2 and sys.argv[1] == 'init':
	if os.geteuid() == 0:
		# mkdirs

		os.makedirs(dataDir, 0o755, exist_ok=True)
		os.makedirs(bootDir, 0o755, exist_ok=True)
		os.makedirs(ofsLowerDir, 0o755, exist_ok=True)

		bootcode_file = os.path.join(bootDir, "bootcode.bin")
		if not os.path.exists(bootcode_file):
			run_os_cmd("ln -fs /boot/bootcode.bin " + bootcode_file)

		usb_paths = getusbpaths()
		# Delete links for Px
		for link in glob.glob(bootDir + "*-*"):
			if os.path.islink(link):
				_path = os.path.realpath(link)
				if _path[0:len(dataDir)] == dataDir and _path[-5:] == '/boot':
					_node_index = _path[len(dataDir):][:len(node_prefix)][-1:]
					if _node_index in usb_paths:
						os.unlink(link)


##############
# End Init #
##############

# Parse arguments and do actions

if args == 2 and (sys.argv[1] == "on" or sys.argv[1] == "off"):
	# Turn on/off ALL devices
	# Turn all ClusterHAT ports on
	actioned = 0
	if version == 1:
		alertstatus = GPIO.input(ports[0])
		if not alertstatus:
			GPIO.output(ports[0], 1)
		for port in ports[1:]:
			if actioned >= clusterhat_size:
				break
			if sys.argv[1] == "on":
				if not GPIO.input(port):
					GPIO.output(port, 1)
					if actioned < maxpi:
						time.sleep(delay)
				actioned += 1
			else:
				GPIO.output(port, 0)
		if not alertstatus:
			GPIO.output(ports[0], 0)
	else:
		alertstatus = alert.get()
		if not alertstatus:
			alert.on()
		if sys.argv[1] == "on":
			status = hat.read_byte()
			if (actioned < clusterhat_size) and ((status & (1 << 0)) == 0):
				p1.on()
				print("Turning node 1 on")
				time.sleep(delay)
				actioned += 1
			if (actioned < clusterhat_size) and ((status & (1 << 1)) == 0):
				p2.on()
				print("Turning node 2 on")
				time.sleep(delay)
				actioned += 1
			if (actioned < clusterhat_size) and ((status & (1 << 2)) == 0):
				p3.on()
				print("Turning node 3 on")
				time.sleep(delay)
				actioned += 1
			if (actioned < clusterhat_size) and ((status & (1 << 3)) == 0):
				p4.on()
				print("Turning node 4 on")
				actioned += 1
		else:

			print("Turning all nodes off")
			p1.off()
			p2.off()
			p3.off()
			p4.off()
		if not alertstatus:
			alert.off()
elif args > 2 and (sys.argv[1] == "on" or sys.argv[1] == "off"):
	# Turn on/off pX
	actioned = 0
	# Build list of pi zero numbers to turn alert LED on for
	zeros = []
	for zero in sys.argv[2:]:
		if not (1 <= int(zero[-1:]) < maxpi):
			print("ERROR: Valid options are 1-"+str(maxpi))
			sys.exit(1)
		zeros.append(int(zero[-1:]))
	for zero in zeros:
		lastpi = 0  # max pX for the current device
		lastpi += clusterhat_size
		if zero <= lastpi:
			if version == 1:
				actioned += 1
				if sys.argv[1] == 'on':
					if not GPIO.input(ports[zero]):
						GPIO.output(ports[zero], 1)
						if actioned < len(zeros):
							time.sleep(delay)
				else:
					GPIO.output(ports[zero], 0)
			else:
				if sys.argv[1] == 'on':
					status = hat.read_byte()
					actioned += 1
					if zero == 1:
						if (status & (1 << 0)) == 0:
							p1.on()
							if actioned < len(zeros):
								time.sleep(delay)
					elif zero == 2:
						if (status & (1 << 1)) == 0:
							p2.on()
							if actioned < len(zeros):
								time.sleep(delay)
					elif zero == 3:
						if (status & (1 << 2)) == 0:
							p3.on()
							if actioned < len(zeros):
								time.sleep(delay)
					elif zero == 4:
						if (status & (1 << 3)) == 0:
							p4.on()
							if actioned < len(zeros):
								time.sleep(delay)
				else:
					if zero == 1:
						p1.off()
					elif zero == 2:
						p2.off()
					elif zero == 3:
						p3.off()
					elif zero == 4:
						p4.off()
			continue

elif args == 2 and sys.argv[1] == "status":
	# Show status of all Cluster HAT / ClusterCTRL devices
	print("clusterhat:{}".format(clusterhat))
	print("maxpi:{}".format(maxpi))
	cnt = 0
	if clusterhat:
		print("hat_version:{}.{}".format(version, version_minor))
		print("hat_version_major:{}".format(version))
		print("hat_version_minor:{}".format(version_minor))
		print("hat_size:{}".format(clusterhat_size))


		f = open(hat_uuid, 'r')
		print("hat_uuid:{}".format(f.read().strip('\x00')))
		f.close()
		f = open(hat_vendor, 'r')
		print("hat_vendor:{}".format(f.read().strip('\x00')))
		f.close()
		f = open(hat_pid, 'r')
		print("hat_product_id:{}".format(f.read().strip('\x00')))
		f.close()
		if version == 1:
			print("hat_alert:{}".format(GPIO.input(ports[0])))
			for p in range(1, clusterhat_size+1):
				print("p{}:{}".format(p, GPIO.input(ports[p])))
		else:
			print("hat_alert:{}".format(alert.get()))
			if version_minor == 0:
				print("hat_hub:{:d}".format(hub.get()))
			else:
				print("hat_hub:{:d}".format(not hub.get()))
			print("hat_wp:{}".format(wp.get()))
			print("hat_led:{}".format(led.get()))
			print("hat_wplink:{}".format(wp_link))
			print("hat_xra1200p:{}".format(xra1200p))
			status = hat.read_byte()
			for p in range(1, clusterhat_size + 1):
				print("p{}:{:d}".format(p, ((status & (1 << (p - 1))) > 0)))
		cnt += clusterhat_size

elif args == 3 and sys.argv[1] == 'hub' and (sys.argv[2] == 'on' or sys.argv[2] == 'off'):
	if clusterhat:
		if version == 1:
			print("ERROR: hub control not supported on Cluster HAT v1.x\n")
		else:
			if sys.argv[2] == 'on':
				if version_minor == 0:
					hub.on()
				else:
					hub.off()
			else:
				if version_minor == 0:
					hub.off()
				else:
					hub.on()
elif args == 3 and sys.argv[1] == 'hub' and (sys.argv[2] == 'reset'):
	if clusterhat and version != 1:
		if version_minor == 0:
			hub.off()
			time.sleep(delay)
			hub.on()
		else:
			hub.on()
			time.sleep(delay)
			hub.off()
elif args == 3 and sys.argv[1] == 'alert' and (sys.argv[2] == 'on' or sys.argv[2] == 'off'):
	# Turn ALL ALERT LED on/off
	if clusterhat:
		if version == 1:
			if sys.argv[2] == 'on':
				GPIO.output(ports[0], 1)
			else:
				GPIO.output(ports[0], 0)
		else:
			if sys.argv[2] == 'on':
				alert.on()
			else:
				alert.off()
elif args > 3 and sys.argv[1] == 'alert' and (sys.argv[2] == 'on' or sys.argv[2] == 'off'):
	# Turn on/off ALERT LED for pX
	# Build list of pi zero numbers to turn alert LED on for
	zeros = []
	for zero in sys.argv[3:]:
		if not (1 <= int(zero[-1:]) < maxpi):
			print("ERROR: Valid options are 1-"+str(maxpi))
			sys.exit(1)
		zeros.append(int(zero[-1:]))

	for zero in zeros:
		lastpi = 0  # max pX for the current device
		if clusterhat:
			lastpi += clusterhat_size
			if zero <= lastpi:
				if version == 1:
					if sys.argv[2] == 'on':
						GPIO.output(ports[0], 1)
					else:
						GPIO.output(ports[0], 0)
				else:
					if sys.argv[2] == 'on':
						alert.on()
					else:
						alert.off()
				continue
elif args == 3 and sys.argv[1] == 'led' and (sys.argv[2] == 'on' or sys.argv[2] == 'off'):
	# Enable or Disable LED (not supported on ClusterHAT v1.x)
	if clusterhat and version == 2:
		if sys.argv[2] == 'on':
			led.on()
		else:
			led.off()
elif args > 1 and sys.argv[1] == 'getpath':
	zeros = []
	if args > 2:
		for zero in sys.argv[2:]:
			if not (1 <= int(zero[-1:]) < maxpi):
				print("ERROR: Valid options are 1-"+str(maxpi))
				sys.exit(1)
			zeros.append(int(zero[-1:]))

	else:
		zeros = range(1, maxpi+1)
	paths = getusbpaths(zeros)
	for p, path in sorted(paths.items()):
		print("p{}:{}".format(p, path))

elif args == 4 and sys.argv[2] == 'wp' and (sys.argv[3] == 'on' or sys.argv[3] == 'off'):
	# Not supported on ClusterCTRL or ClusterHAT v1.x
	if clusterhat and version == 2:
		if sys.argv[3] == 'on':
			wp.on()
		else:
			if xra1200p and wp_link:
				print("Unable to disable EEPROM WP (Solder link set)")
			else:
				wp.off()

elif sys.argv[1] == "usbboot" and (sys.argv[2] == "on" or sys.argv[2] == "setup" or sys.argv[2] == "off" or sys.argv[2] == "status"):
	zeros = []
	if args > 3:
		for argv in sys.argv[3:]:
			if len(argv) == 1:
				zero = int(argv)
			else:
				zero = argv[-1:]
			if not (1 <= int(zero) < maxpi + 1):
				print("ERROR: Valid options are 1-" + str(maxpi))
				sys.exit(1)
			zeros.append(int(zero))
	else:
		zeros = range(1, clusterhat_size+1)

	if sys.argv[2] == "setup":
		usbboot_node_on(zeros, True)
	if sys.argv[2] == "on":
		usbboot_node_on(zeros, False)
	elif sys.argv[2] == "off":
		usbboot_node_off(zeros)
	elif sys.argv[2] == "status":
		print("NYI")
elif sys.argv[1] == "usbboot" and sys.argv[2] == "service":
	zeros = range(1, clusterhat_size + 1)
	usbboot_node_on(zeros, False)
elif sys.argv[1] == "usbboot" and sys.argv[2] == "reset":
	if args == 4:
		node = sys.argv[3]
		node_dir = get_node_dir(node)
		# Turn off node
		usbboot_node_off(node)
		# get oFS dir
		ofs_dir = os.path.join(node_dir, ofs_dir)
		# empty overlayfs subdir
		for filename in os.listdir(ofs_dir):
		    file_path = os.path.join(ofs_dir, filename)
		    try:
		        if os.path.isfile(file_path) or os.path.islink(file_path):
		            os.unlink(file_path)
		        elif os.path.isdir(file_path):
		            shutil.rmtree(file_path)
		    except Exception as e:
		        print('Failed to delete %s. Reason: %s' % (file_path, e))
		#and then re-init usbboot node
		usbboot_node_on(node, True)
	else:
		print("Too many arguments. ")
elif sys.argv[1] == "usbboot" and sys.argv[2] == "resize":
	print("NTI")
elif args == 2 and sys.argv[1] == 'maxpi':
	print(maxpi)
elif args == 2 and sys.argv[1] == 'init':
	# First run init is handled above this is just here to allow the command to succeed
	pass
else:
	print("Error: Arguments did not match any known inputs")

